{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","C_Users_gssak_Desktop_block_image_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","C_Users_gssak_Desktop_block_image_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_gssak_Desktop_block_image_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadImage","description","add","error","loading","decentragram","methods","hash","send","from","account","on","images","bind","C_Users_gssak_Desktop_block_image_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_8__","tipImageOwner","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Decentragram","networks","Contract","abi","address","imageCount","imagesCount","i","image","concat","C_Users_gssak_Desktop_block_image_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","sort","b","tipAmount","id","_this2","value","react__WEBPACK_IMPORTED_MODULE_9___default","_Navbar__WEBPACK_IMPORTED_MODULE_13__","className","_Main__WEBPACK_IMPORTED_MODULE_14__","Component","Navbar","react__WEBPACK_IMPORTED_MODULE_5___default","href","rel","width","height","alt","src","Identicon","toString","Main","role","style","maxWidth","onSubmit","imageDescription","accept","onChange","ref","input","placeholder","required","map","key","author","class","utils","fromWei","onClick","toWei"],"mappings":"0JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,y4qGE1HbC,EADaC,EAAQ,IACdC,CAAW,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,UAElEd,cAiGJ,SAAAA,EAAYe,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAnB,IACjBgB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAjB,GAAAsB,KAAAH,KAAMJ,KA3CRQ,YAAc,SAAAC,GACZA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAC1BC,EAAS,IAAItC,OAAOuC,WAE1BD,EAAOE,kBAAkBL,GACzBG,EAAOG,UAAY,WACjBhB,EAAKiB,SAAS,CACZC,OAAQC,EAAON,EAAOO,QACtBC,KAAMX,EAAKW,KACXC,KAAMZ,EAAKY,OAEbC,QAAQC,IAAI,SAAUxB,EAAKyB,MAAMP,UA6BlBlB,EAzBnB0B,YAAc,SAAAC,GACZJ,QAAQC,IAAI,8BAGZ/B,EAAKmC,IAAI5B,EAAKyB,MAAMP,OAAQ,SAACW,EAAOT,GAClCG,QAAQC,IAAI,cAAeJ,GACxBS,EACDN,QAAQM,MAAMA,IAIhB7B,EAAKiB,SAAS,CAAEa,SAAS,IACvB9B,EAAKyB,MAAMM,aAAaC,QAAQN,YAAYN,EAAO,GAAGa,KAAMN,GAAaO,KAAK,CAAEC,KAAMnC,EAAKyB,MAAMW,UAAWC,GAAG,kBAAmB,SAACJ,GACnIjC,EAAKiB,SAAS,CAAEa,SAAS,UAc7B9B,EAAKyB,MAAQ,CACXW,QAAS,GACTL,aAAa,KACbO,OAAO,GACPR,SAAQ,GAIV9B,EAAK0B,YAAc1B,EAAK0B,YAAYa,KAAjBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAAD,KACnBA,EAAKyC,cAAgBzC,EAAKyC,cAAcF,KAAnBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAAD,KACrBA,EAAKO,YAAcP,EAAKO,YAAYgC,KAAjBtC,OAAAuC,EAAA,EAAAvC,QAAAuC,EAAA,EAAAvC,CAAAD,KAZFA,4MA9FXG,KAAKuC,kCACLvC,KAAKwC,sQAKPpE,OAAOqE,gCACTrE,OAAOsE,KAAO,IAAIC,IAAKvE,OAAOqE,mBACxBrE,OAAOqE,SAASG,sCAEfxE,OAAOsE,KACdtE,OAAOsE,KAAO,IAAIC,IAAKvE,OAAOsE,KAAKG,iBAGnCzE,OAAO0E,MAAM,oVAKTJ,EAAOtE,OAAOsE,cAEGA,EAAKK,IAAIC,4BAA1BC,SACNjD,KAAKc,SAAS,CAAEmB,QAASgB,EAAS,cAEVP,EAAKK,IAAIG,IAAIC,kBAA/BC,WACAC,EAAcC,EAAaC,SAASH,4BAElCxB,EAAe,IAAIc,EAAKK,IAAIS,SAASF,EAAaG,IAAKJ,EAAYK,SACzE1D,KAAKc,SAAS,CAAEc,2BACUA,EAAaC,QAAQ8B,aAAaxD,eAAtDyD,SACN5D,KAAKc,SAAS,CAAE8C,gBAIPC,EAAI,eAAGA,GAAKD,qCACChC,EAAaC,QAAQM,OAAO0B,GAAG1D,eAA7C2D,SACN9D,KAAKc,SAAS,CACZqB,OAAM,GAAA4B,OAAAjE,OAAAkE,EAAA,EAAAlE,CAAME,KAAKsB,MAAMa,QAAjB,CAAyB2B,cAHDD,4BAQlC7D,KAAKc,SAAS,CACZqB,OAAQnC,KAAKsB,MAAMa,OAAO8B,KAAK,SAACtF,EAAEuF,GAAH,OAASA,EAAEC,UAAYxF,EAAEwF,cAG1DnE,KAAKc,SAAS,CAAEa,SAAU,4BAE1BvD,OAAO0E,MAAM,oMAuCHsB,EAAID,GAAW,IAAAE,EAAArE,KAC3BA,KAAKc,SAAS,CAAEa,SAAS,IACzB3B,KAAKsB,MAAMM,aAAaC,QAAQS,cAAc8B,GAAIrC,KAAK,CAAEC,KAAMhC,KAAKsB,MAAMW,QAASqC,MAAOH,IAAajC,GAAG,kBAAmB,SAACJ,GAC5HuC,EAAKvD,SAAS,CAAEa,SAAS,wDAoB3B,OACE4C,EAAA5F,EAAAC,cAAA,WACA2F,EAAA5F,EAAAC,cAAA,WACE2F,EAAA5F,EAAAC,cAAC4F,EAAA,EAAD,CAAQvC,QAASjC,KAAKsB,MAAMW,UAC1BjC,KAAKsB,MAAMK,QACT4C,EAAA5F,EAAAC,cAAA,OAAKwF,GAAG,SAASK,UAAU,oBAAmBF,EAAA5F,EAAAC,cAAA,wBAC9C2F,EAAA5F,EAAAC,cAAC8F,EAAA,EAAD,CACCvC,OAAQnC,KAAKsB,MAAMa,OACnB/B,YAAgBJ,KAAKI,YACrBmB,YAAgBvB,KAAKuB,YACrBe,cAAkBtC,KAAKsC,wBA3HlBqC,aAmIH9F,gJC1IT+F,mLAGF,OACEC,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,sDACbI,EAAAlG,EAAAC,cAAA,KACE6F,UAAU,kDACVK,KAAK,IACLtE,OAAO,SACPuE,IAAI,uBAJN,cASAF,EAAAlG,EAAAC,cAAA,MAAI6F,UAAU,mBACZI,EAAAlG,EAAAC,cAAA,MAAI6F,UAAU,oDACZI,EAAAlG,EAAAC,cAAA,SAAO6F,UAAU,kBACfI,EAAAlG,EAAAC,cAAA,SAAOwF,GAAG,WAAWpE,KAAKJ,MAAMqC,UAEhCjC,KAAKJ,MAAMqC,QACT4C,EAAAlG,EAAAC,cAAA,OACA6F,UAAU,OACVO,MAAM,KACNC,OAAO,KACPC,IAAI,GACJC,IAAG,yBAAApB,OAA2B,IAAIqB,IAAUpF,KAAKJ,MAAMqC,QAAS,IAAIoD,cAEpER,EAAAlG,EAAAC,cAAA,uBA3BK+F,aAoCNC,uHCrCTU,mLAEK,IAAAzF,EAAAG,KACP,OACE6E,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,wBACbI,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,OACbI,EAAAlG,EAAAC,cAAA,QAAM2G,KAAK,OAAOd,UAAU,4BAA4Be,MAAO,CAAEC,SAAU,UACzEZ,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,2BACbI,EAAAlG,EAAAC,cAAA,WADF,IACSiG,EAAAlG,EAAAC,cAAA,WADT,IACgBiG,EAAAlG,EAAAC,cAAA,WACdiG,EAAAlG,EAAAC,cAAA,yBACAiG,EAAAlG,EAAAC,cAAA,QAAM8G,SAAU,SAACrF,GACfA,EAAMC,iBACN,IAAMkB,EAAc3B,EAAK8F,iBAAiBrB,MAC1CzE,EAAKD,MAAM2B,YAAYC,KAEvBqD,EAAAlG,EAAAC,cAAA,SAAOsC,KAAK,OAAO0E,OAAO,gCAAgCC,SAAU7F,KAAKJ,MAAMQ,cAC7EyE,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,sBACbI,EAAAlG,EAAAC,cAAA,WACEiG,EAAAlG,EAAAC,cAAA,SACEwF,GAAG,mBACHlD,KAAK,OACL4E,IAAK,SAACC,GAAYlG,EAAK8F,iBAAmBI,GAC1CtB,UAAU,eACVuB,YAAY,uBACZC,UAAQ,KAEhBpB,EAAAlG,EAAAC,cAAA,UAAQsC,KAAK,SAASuD,UAAU,oCAAhC,YAGAzE,KAAKJ,MAAMuC,OAAO+D,IAAI,SAACpC,EAAOqC,GAC9B,OACEtB,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,YAAY0B,IAAKA,GAC9BtB,EAAAlG,EAAAC,cAAA,OAAK6F,UAAU,eACbI,EAAAlG,EAAAC,cAAA,OACE6F,UAAU,OACVO,MAAM,KACNC,OAAO,KACPE,IAAG,yBAAApB,OAA2B,IAAIqB,IAAUtB,EAAMsC,OAAQ,IAAIf,YAC9DH,IAAI,KAENL,EAAAlG,EAAAC,cAAA,SAAO6F,UAAU,cAAcX,EAAMsC,SAEvCvB,EAAAlG,EAAAC,cAAA,MAAIwF,GAAG,YAAYK,UAAU,+BAC3BI,EAAAlG,EAAAC,cAAA,MAAI6F,UAAU,mBACZI,EAAAlG,EAAAC,cAAA,KAAGyH,MAAM,eACTxB,EAAAlG,EAAAC,cAAA,OAAKuG,IAAG,+BAAApB,OAAiCD,EAAMhC,MAAQ0D,MAAO,CAAEC,SAAU,SAAUP,IAAI,MAExFL,EAAAlG,EAAAC,cAAA,SAAIkF,EAAMtC,cAEZqD,EAAAlG,EAAAC,cAAA,MAAIuH,IAAKA,EAAK1B,UAAU,wBACtBI,EAAAlG,EAAAC,cAAA,SAAO6F,UAAU,8BAAjB,SACSrG,OAAOsE,KAAK4D,MAAMC,QAAQzC,EAAMK,UAAUkB,WAAY,SAD/D,QAGAR,EAAAlG,EAAAC,cAAA,UACE6F,UAAU,uCACVtD,KAAM2C,EAAMM,GACZoC,QAAS,SAACnG,GACR,IAAI8D,EAAY/F,OAAOsE,KAAK4D,MAAMG,MAAM,MAAO,SAC/CrF,QAAQC,IAAIhB,EAAMG,OAAOW,KAAMgD,GAC/BtE,EAAKD,MAAM0C,cAAcjC,EAAMG,OAAOW,KAAMgD,KANhD,+BArDLQ,aA6EJW","file":"static/js/main.3f892931.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\n// import Identicon from 'identicon.js';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n  \n  //connection to metamask\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Decentragram.networks[networkId]\n    if(networkData) {\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram })\n      const imagesCount = await decentragram.methods.imageCount().call()\n      this.setState({ imagesCount })\n\n      // Load images that were Uploaded.\n\n      for (let i = 1; i <= imagesCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n\n      // Sort images. Show images with highest tip first. [[Descending]\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n\n      this.setState({ loading : false });\n    } else {\n      window.alert('Decentragram contract not deployed to detected network.')\n    }\n  }\n\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n        this.state.decentragram.methods.uploadImage(result[0].hash, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram:null,\n      images:[],\n      loading:true,\n      // loading:false,\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n      <br /> \n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n             images={this.state.images}\n             captureFile = { this.captureFile }\n             uploadImage = { this.uploadImage }\n             tipImageOwner = { this.tipImageOwner }\n            />\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n// import photo from '../photo.png'\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-text navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          {/* <img src={photo} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" /> */}\n          ImageCrypt\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                alt=''\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n              />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <br /> <br /> <br />\n              <h2>Share Image</h2>\n              <form onSubmit={(event) => {\n                event.preventDefault()\n                const description = this.imageDescription.value\n                this.props.uploadImage(description)\n              }} >\n                <input type='file' accept=\".jpg, .jpeg, .png, .bmp, .gif\" onChange={this.props.captureFile} />\n                  <div className=\"form-group mr-sm-2\">\n                    <br></br>\n                      <input\n                        id=\"imageDescription\"\n                        type=\"text\"\n                        ref={(input) => { this.imageDescription = input }}\n                        className=\"form-control\"\n                        placeholder=\"Image description...\"\n                        required />\n                  </div>\n                <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">Upload!</button>\n              </form>\n              {/* <p>&nbsp;</p> */}\n              { this.props.images.map((image, key) => {\n                return(\n                  <div className=\"card mb-4\" key={key} >\n                    <div className=\"card-header\">\n                      <img\n                        className='mr-2'\n                        width='30'\n                        height='30'\n                        src={`data:image/png;base64,${new Identicon(image.author, 30).toString()}`}\n                        alt=''\n                      />\n                      <small className=\"text-muted\">{image.author}</small>\n                    </div>\n                    <ul id=\"imageList\" className=\"list-group list-group-flush\">\n                      <li className=\"list-group-item\">\n                        <p class=\"text-center\">\n                        <img src={`https://ipfs.infura.io/ipfs/${image.hash}`} style={{ maxWidth: '420px'}} alt=''/>\n                        </p>\n                        <p>{image.description}</p>\n                      </li>\n                      <li key={key} className=\"list-group-item py-2\">\n                        <small className=\"float-left mt-1 text-muted\">\n                          TIPS: {window.web3.utils.fromWei(image.tipAmount.toString(), 'Ether')} ETH\n                        </small>\n                        <button\n                          className=\"btn btn-link btn-sm float-right pt-0\"\n                          name={image.id}\n                          onClick={(event) => {\n                            let tipAmount = window.web3.utils.toWei('0.1', 'Ether')\n                            console.log(event.target.name, tipAmount)\n                            this.props.tipImageOwner(event.target.name, tipAmount)\n                          }}\n                        >\n                          TIP 0.1 ETH\n                        </button>\n                      </li>\n                    </ul>\n                  </div>\n                )\n              })}\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;"],"sourceRoot":""}